---
const schools = [
    {
        title: {
            spanish: "Universidad de Murcia - Facultad de Informática",
            english: "University of Murcia - School of Computer Science",
        },
        subtitle: {
            spanish: "Grado en Ingenería Informática - Mención en Software",
            english: "Bachelor in Computer Science - Software Major",
        },
        period:
        {
            spanish: "Septiembre 2019 - Junio 2023",
            english: "September 2019 - June 2023",
        }, 
        description: {
            spanish: "Mi paso por la Universidad marcó el inicio de mi carrera, 4 años donde mi formación trascendió el mero aprendizaje de programación. Sumergiéndome en el vasto mundo de la Informática, adquirí conocimientos en Computación, Redes, Sistemas Operativos, Matemáticas y sobre todo, en el mundo del Software. Esta diversidad de materias no solo me forjó como un Ingeniero de Software, sino que también afianzó mi versatilidad y mi capacidad para adaptarme e innovar en el cambiante panorama tecnológico. ",
            english: "My time at the University marked the beginning of my career, four years where my education transcended mere programming learning. Immersing myself in the vast world of Computer Science, I acquired knowledge in Computing, Networks, Operating Systems, Mathematics, and above all, in the realm of Software. This diversity of subjects not only shaped me as a Software Engineer but also strengthened my versatility and my ability to adapt and innovate in the ever-changing technological landscape.",
        },
        image: "/assets/education/UMU.jpg",
        technologies: ["Flutter", "Dart", "Firebase"], 
    },
];
import EducationCard from "../widgets/EducationCard.astro";

const { currentLanguage } = Astro.props;
---

<section id="education" class="education">
    <div>
        <h1 class="section-title text-center" id="education-title" data-i18n="education-title">
            {currentLanguage === 'spanish' ? 'Educación' : 'Education'}
        </h1>
        <div class="education-container">
            {schools.map((school) => <EducationCard school={school} key={school.title} language={currentLanguage}/>)}
        </div>
    </div>
</section>

<script>
    // Actualizar cuando cambie el idioma
    document.addEventListener('languageChanged', (event) => {
        if (event instanceof CustomEvent && event.detail && event.detail.language) {
            updateEducationCards(event.detail.language);
        }
    });

    // Inicializar con el idioma actual
    document.addEventListener('DOMContentLoaded', () => {
        const currentLanguage = localStorage.getItem('language') || 'spanish';
        updateEducationCards(currentLanguage);
    });

    // Función para actualizar las tarjetas de educación cuando cambia el idioma
    function updateEducationCards(language) {
        const cards = document.querySelectorAll('.education-card');
        
        cards.forEach(card => {
            // Obtener los elementos traducibles dentro de cada tarjeta
            const titleElement = card.querySelector('.card-title');
            const subtitleElement = card.querySelector('.card-subtitle');
            const periodElement = card.querySelector('.card-period');
            const descriptionElement = card.querySelector('.card-description');
            
            // Obtener datos almacenados en atributos data
            if (titleElement) {
                const titles = {
                    spanish: titleElement.getAttribute('data-spanish-title'),
                    english: titleElement.getAttribute('data-english-title')
                };
                if (titles[language]) {
                    titleElement.textContent = titles[language];
                }
            }
            
            if (subtitleElement) {
                const subtitles = {
                    spanish: subtitleElement.getAttribute('data-spanish-subtitle'),
                    english: subtitleElement.getAttribute('data-english-subtitle')
                };
                if (subtitles[language]) {
                    subtitleElement.textContent = subtitles[language];
                }
            }
            
            if (periodElement) {
                const periods = {
                    spanish: periodElement.getAttribute('data-spanish-period'),
                    english: periodElement.getAttribute('data-english-period')
                };
                if (periods[language]) {
                    periodElement.textContent = periods[language];
                }
            }
            
            if (descriptionElement) {
                const descriptions = {
                    spanish: descriptionElement.getAttribute('data-spanish-description'),
                    english: descriptionElement.getAttribute('data-english-description')
                };
                if (descriptions[language]) {
                    descriptionElement.textContent = descriptions[language];
                }
            }
        });
    }
</script>

<style>
    .education-container {
        display: flex;
        justify-content: center;
        margin-top: 3rem;
        margin-bottom: 10rem;
    }

    @media (max-width: 768px) {
        .section-title {
            margin-top: 0rem;
        }

        .education-container {
            margin-bottom: 0rem;
        }
    }
</style>
